/*
Package binaryTree implements a simple library for binary trees.
binary Tree is generated by a comparator in data
*/
package main

import (
	"fmt"
)

// Node: represents node in the binary tree with a value as an integer
type Tree struct {
	Left  *Tree // left child of the node
	Right *Tree // right child of the node
	Value int   // determines if on left or right of parent
}

// Creates a tree

func insert(t *Tree, value int) *Tree {
	if t == nil {
		t = &Tree{nil, nil, value}
	} else if value <= t.Value {
		t.Left = insert(t.Left, value)
	} else {
		t.Right = insert(t.Right, value)
	}
	return t
}

func (t *Tree) String() string {
	if t == nil {
		return "()"
	}
	s := ""
	if t.Left != nil {
		s += t.Left.String() + " "
	}
	s += fmt.Sprint(t.Value)
	if t.Right != nil {
		s += " " + t.Right.String()
	}
	return "(" + s + ")"
}

func main() {
	t := Tree.New(10)
	fmt.Println(t)
}
